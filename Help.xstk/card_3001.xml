<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE card PUBLIC "-//Apple, Inc.//DTD card V 2.0//EN" "" >
<card>
	<id>3001</id>
	<name></name>
	<showPict><true /></showPict>
	<cantDelete><false /></cantDelete>
	<dontSearch><false /></dontSearch>
	<script></script>
	<part>
		<id>1</id>
		<type>field</type>
		<layer>card</layer>
		<visible><true /></visible>
		<enabled><true /></enabled>
		<rect>
			<left>-1</left>
			<top>-1</top>
			<right>513</right>
			<bottom>343</bottom>
		</rect>
		<style>scrolling</style>
		<showName><false /></showName>
		<highlight><false /></highlight>
		<autoHighlight><true /></autoHighlight>
		<sharedHighlight><false /></sharedHighlight>
		<family>0</family>
		<titleWidth>0</titleWidth>
		<icon>0</icon>
		<dontWrap><false /></dontWrap>
		<dontSearch><false /></dontSearch>
		<sharedText><false /></sharedText>
		<fixedLineHeight><false /></fixedLineHeight>
		<autoTab><false /></autoTab>
		<lockText><false /></lockText>
		<autoSelect><false /></autoSelect>
		<multipleLines><false /></multipleLines>
		<showLines><false /></showLines>
		<wideMargins><false /></wideMargins>
		<controllerVisible><false /></controllerVisible>
		<textAlign>left</textAlign>
		<font>Geneva</font>
		<textSize>12</textSize>
		<name>Help Text</name>
		<script></script>
	</part>
	<content>
		<layer>card</layer>
		<id>1</id>
		<text>{\rtf1\ansi\ansicpg1252\cocoartf1138
{\fonttbl\f0\fswiss\fcharset0 Optima-Regular;\f1\fnil\fcharset0 Monaco;\f2\fnil\fcharset0 LucidaGrande;
}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\b\fs48 \cf0 The Forge Programming Language
\b0\fs28 \
\
The following syntax is currently supported by Stacksmith's programming language "Forge":\
\

\b 1. Top-Level Constructs
\b0 \
\

\f1\fs20 	on handlerName [&lt;paramName1&gt;[,&lt;paramName2&gt;[, ...]]\
		commands\
	end handlerName\

\f0\fs28 \
This defines a command handler with the specified number of parameters that are automatically assigned to the local variables of that name.\
\

\f1\fs20 	function handlerName [&lt;paramName1&gt;[,&lt;paramName2&gt;[, ...]]\
		commands\
	end handlerName\

\f0\fs28 \

\b 2. Commands
\b0 \
\

\f1\fs20 	handlerName [&lt;param1&gt;[,&lt;param2&gt;[,...]]]\

\f0\fs28 \
This is the command that calls a command handler. The parameter values passed in may be any valid expression. If the current script does not contain a command handler with the given name, this will look up the message path for another object to handle the message. The message path is:\
\
	part (button, movie player or field) 
\f2 \uc0\u8594 
\f0  card 
\f2 \uc0\u8594 
\f0  background 
\f2 \uc0\u8594 
\f0  stack\
\
If nobody handles the given handler, the current script will be aborted and an error message shown.\
\

\f1\fs20 	put &lt;expression&gt; into &lt;container&gt;\
	set &lt;container&gt; to &lt;expression&gt;\

\f0\fs28 \
This stores the value of the specified expression in the variable or property with the specified name. If there is no variable of that name yet, it is created.\
There are also put X after Y for appending Y to X, and put X before Y for prefixing Y with X.\
\

\f1\fs20 	put &lt;expression&gt;\

\f0\fs28 \
Writes the specified expression as a string to the message box.\
\

\f1\fs20 	return &lt;expression&gt;\

\f0\fs28 \
This sets the return value of the current handler to the value of the specified expression and exits the current handler.\
\

\f1\fs20 	repeat while &lt;conditionExpression&gt;\
		commands\
	end repeat\

\f0\fs28 \
This executes the commands repeatedly while the value of &lt;conditionExpression&gt; is "true". If conditionExpression starts out false, this executes no commands apart from evaluating the expression.\
\

\f1\fs20 	repeat until &lt;conditionExpression&gt;\
		commands\
	end repeat\

\f0\fs28 \
This basically loops while the conditionExpression is false.\
\

\f1\fs20 	repeat [for] &lt;count&gt; [times]\
		commands\
	end repeat\

\f0\fs28 \
This repeats the specified commands &lt;count&gt; times.\
\

\f1\fs20 	repeat with &lt;variableName&gt; from &lt;startNum&gt; [down] to &lt;endNum&gt;\
		commands\
	end repeat\

\f0\fs28 \
puts each number from startNum to endNum into the variable and executes the commands for each one of them.\
\

\f1\fs20 	repeat for each &lt;chunkType&gt; &lt;variableName&gt; in &lt;expression&gt;\
		commands\
	end repeat\

\f0\fs28 \
Put each byte, character, word, line or item in the given expression into the specified variable and execute the given commands for it.\
\

\f1\fs20 	global &lt;variableName&gt;\

\f0\fs28 \
Create a global variable with the given name (if it doesn't already exist) and make it possible to manipulate it in the current handler.\
\

\f1\fs20 	go [to] &lt;objectDescriptor&gt;\

\f0\fs28 \
Opens the specified stack, or navigates to the specified card in the current stack.\
\

\f1\fs20 	visual effect &lt;effectName&gt;\

\f0\fs28 \
Specifies a transition effect to be used by the next "go" command.\
\

\f1\fs20 	answer &lt;message&gt; [with &lt;buttonName&gt; [or &lt;buttonName&gt;] [or &lt;buttonName&gt;]]\

\f0\fs28 \
displays a dialog containing a message and up to three replies as buttons. The variable "the result" will contain the name of the button the user clicked (and "it" will, as well - for historical reasons).\
\

\f1\fs20 	ask &lt;question&gt; [with &lt;defaultAnswer&gt;]\

\f0\fs28 \
Display a dialog containing the given message and an edit field for entering an answer, plus OK and Cancel buttons. The variable "the result" will contain the button the user clicked (either "OK" or "Cancel") and the variable "it" will contain the answer that was in the text field when the user clicked the button.\
\

\f1\fs20 	pass handlerName [&lt;param1&gt; [, &lt;param2&gt; [, ...]]]\
	pass handlerName( [&lt;param1&gt; [, &lt;param2&gt; [, ...]]] )\

\f0\fs28 \
If you are handling a message in a command or function handler, you can use these commands to pass on the respective messages. I.e. if your button handles the 
\f1\fs20 mouseUp
\f0\fs28  message, but you also want the 
\f1\fs20 mouseUp
\f0\fs28  code in the current card called, write 
\f1\fs20 pass mouseUp
\f0\fs28  to hand the message off to the card. This call will exit the current handler with the return value from the handler one level up.\
\

\b 3. Expressions
\b0 \
\
An expression consists of either a single term, or two or more terms ("operands") chained together using operators.\
\
Supported operators at this time are:\
\
	
\f1\fs20 +
\f0\fs28   - Add the two operands.\
	
\f1\fs20 -
\f0\fs28   - Subtract the second operand from the first one.\
	
\f1\fs20 *
\f0\fs28   - Multiply the two operands.\
	
\f1\fs20 /
\f0\fs28   - Divide the first operand by the second one.\
	
\f1\fs20 =
\f0\fs28   - compare the two operands. This tries to do int/int, float/float or bool/bool comparisons before it falls back on case-insensitive string comparison.\
	
\f1\fs20 &lt;&gt;
\f0\fs28  - compare the two operands, returning FALSE if they are equal and TRUE if they are not equal.\
	
\f1\fs20 is
\f0\fs28  - alternate spelling for =.\
	
\f1\fs20 is not
\f0\fs28  - alternate spelling for &lt;&gt;\
	
\f1\fs20 &lt;
\f0\fs28   - compare the two operands and return TRUE if the first one is less than the second one, FALSE otherwise. For numbers, this compares their numeric value, for strings their sort order. I.e. Aa &lt; Ab.\
	
\f1\fs20 &gt;
\f0\fs28   - compare the two operands and return TRUE if the first one is more than the second one, FALSE otherwise. For numbers, this compares their numeric value, for strings their sort order. I.e. Ab &gt; Aa.\
	
\f1\fs20 &lt;=
\f0\fs28  - compare the two operands and return TRUE if the first one is less than or equal to the second one, FALSE otherwise. For numbers, this compares their numeric value, for strings their sort order. I.e. Aa &lt;= Ab, Aa &lt;= Aa.\
	
\f1\fs20 &gt;=
\f0\fs28  - compare the two operands and return TRUE if the first one is more than or equal to the second one, FALSE otherwise. For numbers, this compares their numeric value, for strings their sort order. I.e. Ab &gt;= Aa, Aa &gt;= Aa.\
	
\f1\fs20 mod[ulo]
\f0\fs28  - Return the remainder that occurs when dividing the first operand by the second.\
	
\f1\fs20 ^
\f0\fs28   - Raise the first exponent to the power of the second. i.e. 2 ^ 3 = 8\
	\
	
\f1\fs20 &amp;
\f0\fs28  - Convert the operands to strings and append the second one to the first one.\
	
\f1\fs20 &amp;&amp;
\f0\fs28  - Like 
\f1\fs20 &amp;
\f0\fs28 , but inserts a space between the two strings.\
\

\b 4. Terms
\b0 \
\
A term can be either a quoted string literal, an unquoted string literal, a variable name, an integer, or a function call.\
\
	
\f1\fs20 "This is a String"
\f0\fs28 \
\
This is a string. It may contain spaces and other odd characters, but it may not contain any quote characters.\
\
	
\f1\fs20 foobar
\f0\fs28 \
\
This is an unquoted string literal. An unquoted string literal must adhere to the same rules as any valid identifier (i.e. handler name or so). In particular, it may not contain spaces or other punctuation. Note that if an unquoted string literal's name collides with a variable name, it will be reinterpreted as a variable name as soon as something has been put into the variable of that name (i.e. as soon as the variable has been created). In fact, all unquoted string literals are simply variables that are initialised with their name as their value.\
\
	
\f1\fs20 myVariable
\f0\fs28 \
\
A variable name must also be a valid identifier. If you use a variable name before something has been put into it, it is treated as an unquoted string literal.\
\
	
\f1\fs20 the result
\f0\fs28 \
	\
The Result is a special variable that holds the return value from the last handler that's been called in the current function.\
\
	
\f1\fs20 123
\f0\fs28 \
\
This is an integer. An integer may only consist of the digits 1 through 9 and 0.\
\
	
\f1\fs20 123.456
\f0\fs28 \
\
This is a fractional number. A fractional number may consist of the digits 1 through 9, 0, and of a single decimal point.\
\
	
\f1\fs20 myFunction( [&lt;param1&gt;[, &lt;param2&gt;[, ...]]] )
\f0\fs28 \
\
A function call works the same as a handler call. It may take parameters. The return value of the function will be used as the value of this term when it is used in an expression.\
\

\f1\fs20 	byte[s] &lt;startOffsetExpr&gt; [to &lt;endOffsetExpr&gt;] of &lt;term&gt;\
	char[acter][s] &lt;startOffsetExpr&gt; [to &lt;endOffsetExpr&gt;] of &lt;term&gt;\
	line[s] &lt;startOffsetExpr&gt; [to &lt;endOffsetExpr&gt;] of &lt;term&gt;\
	item[s] &lt;startOffsetExpr&gt; [to &lt;endOffsetExpr&gt;] of &lt;term&gt;\
	word[s] &lt;startOffsetExpr&gt; [to &lt;endOffsetExpr&gt;] of &lt;term&gt;\

\f0\fs28 \
Extracts a chunk (aka substring) from the specified term. Items are comma-delimited, lines are return-delimited. Words are delimited by one or more characters of whitespace.\
You can also change the value of a chunk.\
\

\f1\fs20 	number of bytes of &lt;expression&gt;\
	number of char[acter]s of &lt;expression&gt;\
	number of lines of &lt;expression&gt;\
	number of items of &lt;expression&gt;\
	number of words of &lt;expression&gt;\

\f0\fs28 \
Counts the number of entities of the specified chunk type that can be extracted from the specified expression. \
\
	
\f1\fs20 constant
\f0\fs28 \
	\
There are several constants whose name consists of one or more identifiers:\
\
	
\f1\fs20 true
\f0\fs28 \
	
\f1\fs20 false
\f0\fs28 \
	
\f1\fs20 return
\f0\fs28 		-- the return character, 
\f1\fs20 numToChar(13)
\f0\fs28 , also available under the\
					shorter "
\f1\fs20 cr
\f0\fs28 " name.\
	
\f1\fs20 lineFeed
\f0\fs28 	-- the Unix newline character, 
\f1\fs20 numToChar(10)
\f0\fs28 , also available\
					under the name "
\f1\fs20 newline
\f0\fs28 ".\
	
\f1\fs20 empty
\f0\fs28 		-- an empty string. Equivalent to 
\f1\fs20 ""
\f0\fs28 .\
	
\f1\fs20 quote
\f0\fs28 		-- the quote character (
\f1\fs20 "
\f0\fs28 )\
	
\f1\fs20 comma
\f0\fs28 		-- the comma character (
\f1\fs20 ,
\f0\fs28 )\
	
\f1\fs20 colon
\f0\fs28 		-- the colon character (
\f1\fs20 :
\f0\fs28 )\
	
\f1\fs20 space
\f0\fs28 		-- the space character ("
\f1\fs20  
\f0\fs28 "), 
\f1\fs20 numToChar(32)
\f0\fs28 \
	
\f1\fs20 tab
\f0\fs28 			-- the tabulator character, 
\f1\fs20 numToChar(9)
\f0\fs28 \
	
\f1\fs20 pi
\f0\fs28 			-- the number "pi". Roughly 
\f1\fs20 3.14
\f0\fs28 \
	\
	
\f1\fs20 iris open
\f0\fs28 			-- transition effect you can pass to the 'visual effect' command.\
	
\f1\fs20 iris close
\f0\fs28 			-- transition effect you can pass to the 'visual effect' command.\
	
\f1\fs20 barn door open
\f0\fs28 		-- transition effect you can pass to the 'visual effect' command.\
	
\f1\fs20 barn door close
\f0\fs28 		-- transition effect you can pass to the 'visual effect' command.\
	
\f1\fs20 checkerboard
\f0\fs28 \
	
\f1\fs20 dissolve
\f0\fs28 			-- transition effect you can pass to the 'visual effect' command.\
	
\f1\fs20 venetian blinds
\f0\fs28 \
	
\f1\fs20 stretch from top
\f0\fs28 \
	
\f1\fs20 stretch from center
\f0\fs28 \
	
\f1\fs20 stretch from bottom
\f0\fs28 \
	
\f1\fs20 shrink to top
\f0\fs28 \
	
\f1\fs20 shrink to center
\f0\fs28 \
	
\f1\fs20 shrink to bottom
\f0\fs28 \
	
\f1\fs20 wipe left
\f0\fs28 			-- transition effect you can pass to the 'visual effect' command.\
	
\f1\fs20 wipe right
\f0\fs28 			-- transition effect you can pass to the 'visual effect' command.\
	
\f1\fs20 wipe up
\f0\fs28 				-- transition effect you can pass to the 'visual effect' command.\
	
\f1\fs20 wipe down
\f0\fs28 			-- transition effect you can pass to the 'visual effect' command.\
	
\f1\fs20 push left
\f0\fs28 			-- transition effect you can pass to the 'visual effect' command.\
	
\f1\fs20 push right
\f0\fs28 			-- transition effect you can pass to the 'visual effect' command.\
	
\f1\fs20 push up
\f0\fs28 				-- transition effect you can pass to the 'visual effect' command.\
	
\f1\fs20 push down
\f0\fs28 			-- transition effect you can pass to the 'visual effect' command.\
	
\f1\fs20 zoom open
\f0\fs28 \
	
\f1\fs20 zoom close
\f0\fs28 \
	
\f1\fs20 zoom in
\f0\fs28 \
	
\f1\fs20 zoom out
\f0\fs28 \
	
\f1\fs20 scroll left
\f0\fs28 			-- transition effect you can pass to the 'visual effect' command.\
	
\f1\fs20 scroll right
\f0\fs28 		-- transition effect you can pass to the 'visual effect' command.\
	
\f1\fs20 scroll up
\f0\fs28 			-- transition effect you can pass to the 'visual effect' command.\
	
\f1\fs20 scroll down
\f0\fs28 			-- transition effect you can pass to the 'visual effect' command.\
\
A term may also consist of an object descriptor:\
\

\f1\fs20 	stack &lt;stackNameOrPath&gt;\

\f0\fs28 	\
A stack, referenced by name or slash-delimited POSIX-style search path. If you only specify the file name, and a stack of that name is not already open, Stacksmith currently makes a best-effort attempt at finding the file, searching for stacks next to the Stacksmith application or in its own "Resources" folder.\
\

\f1\fs20 	background &lt;backgroundNameOrNumber&gt;\

\f0\fs28 \
A background, referenced by name, or number. The number being its position in the list of backgrounds. The first background has the number 1 (not zero).\
\

\f1\fs20 	card &lt;cardNameOrNumber&gt;\

\f0\fs28 \
A card, referenced by name, or number. The number being its position in the list of all cards. The first background has the number 1 (not zero).\
\

\f1\fs20 	card button &lt;buttonNameOrNumber&gt;\
	background button &lt;buttonNameOrNumber&gt;\

\f0\fs28 \
A button on the current card or on its background, referenced by name, or number. The number being its position in the list of all buttons on the card/background. The first and backmost button has the number 1 (not zero).\
\

\f1\fs20 	card field &lt;fieldNameOrNumber&gt;\
	background field &lt;fieldNameOrNumber&gt;\

\f0\fs28 \
A text field on the current card or on its background, referenced by name, or number. The number being its position in the list of all fields on the card/background. The first and backmost field has the number 1 (not zero).\
\

\f1\fs20 	card movie player &lt;playerNameOrNumber&gt;\
	background movie player &lt;playerNameOrNumber&gt;\

\f0\fs28 \
A movie player control on the current card or on its background, referenced by name, or number. The number being its position in the list of all movie players on the card/background. The first and backmost movie player has the number 1 (not zero).\
\

\f1\fs20 	card part &lt;partNameOrNumber&gt;\
	background part &lt;partNameOrNumber&gt;\

\f0\fs28 \
A button or text field on the current card or on its background, referenced by name, or number. The number being its position in the combined list of all buttons and fields on the card/background. The first and backmost part has the number 1 (not zero).\
\

\f1\fs20 	this stack\

\f0\fs28 \
The stack whose window is currently frontmost. This is the "current" stack.\
\

\f1\fs20 	this card\

\f0\fs28 \
The card currently being shown in the frontmost stack's window.\
\

\f1\fs20 	this background\

\f0\fs28 	\
The background that the card specified by "
\f1\fs20 this card
\f0\fs28 " belongs to.\
\

\f1\fs20 	first card\
	last card\

\f0\fs28 \
The respective cards in the current stack (i.e. "
\f1\fs20 this stack
\f0\fs28 ").\
\

\f1\fs20 	next card\
	previous card\

\f0\fs28 \
The card following/preceding "
\f1\fs20 this card
\f0\fs28 ". The previous card of the first card is the last card, and the next card of the last card is the first card, making the list of cards a closed ring as far as "
\f1\fs20 next card
\f0\fs28 " and "
\f1\fs20 current card
\f0\fs28 " are concerned.\
\

\f1\fs20 	me\

\f0\fs28 \
Ths object that the script belongs to in which this object descriptor occurs.\
\
A term may also be a property expression:\
\

\f1\fs20 	[the] [long|short|abbr[ev[iated]]] &lt;propertyName&gt; [of &lt;objectDescriptor&gt;]\

\f0\fs28 \
Depending on the object descriptor, there may be different properties. If there is no object descriptor, it is assumed to be a property of Stacksmith itself, which is global to the entire application. If you provide a variable instead of an object descriptor, the variable will be treated as an associative array, and the property name will be used as the key into the array. There is also the variant\
\

\f1\fs20 	my [long|short|abbr[ev[iated]]] &lt;propertyName&gt;\

\f0\fs28 \
which is equivalent to\
\

\f1\fs20 	[the] [long|short|abbr[ev[iated]]] &lt;propertyName&gt; of me\

\f0\fs28 \

\b 5. Containers
\b0 \
\
A container is an object descriptor for a part (button or field), or a variable, or a property expression. Containers can be changed using the "
\f1\fs20 put
\f0\fs28 " or "
\f1\fs20 set
\f0\fs28 " commands.\
\

\b 6. Properties
\b0 \
\

\b 6.1. Stack Properties
\b0 \
\
	
\f1\fs20 [short] name
\f0\fs28 		-	The name of the stack, without the ".xstk" file type suffix.\
\

\b 6.2. Background Properties
\b0 \
\
	
\f1\fs20 [short] name	
\f0\fs28 	-	The name of the background, as displayed in "Background Info".\
\

\b 6.3. Card Properties
\b0 \
\
	
\f1\fs20 [short] name
\f0\fs28 		-	The name of the card, as displayed in "Card Info".\
\

\b 6.4. FIeld Properties
\b0 \
\
	
\f1\fs20 [short] name
\f0\fs28 		-	The name of the field, as displayed in "Field Info".\
	
\f1\fs20 rectangle
\f0\fs28 			-	The coordinates indicating the size and position of the field, as an associative array containing entries for the keys "
\f1\fs20 top
\f0\fs28 ", "
\f1\fs20 left
\f0\fs28 ", "
\f1\fs20 bottom
\f0\fs28 " and "
\f1\fs20 right
\f0\fs28 " as numbers, relative to a coordinate system that has the origin in its upper left.\
	
\f1\fs20 visible
\f0\fs28 			-	(true/false) Whether the field can be clicked and will be displayed on screen or not.\
	
\f1\fs20 enabled
\f0\fs28 			-	(true/false) Whether the field is supposed to be clickable or not. Parts of the field will be drawn in a "dimmed", inactive appearance.\
	
\f1\fs20 script
\f0\fs28 			-	The script of this field (i.e. the text you entered in its script editor to provide behaviours)\
	
\f1\fs20 style
\f0\fs28 			-	The field's style, controlling its border and behaviour.\
	
\f1\fs20 type
\f0\fs28 				-	Always "field".\
	
\f1\fs20 [short] id
\f0\fs28 		-	the unique identification number of the field.\
	
\f1\fs20 dontWrap
\f0\fs28 			-	(true/false) Whether text will be wrapped at the edge of the field or only return characters cause line breaks.\
	
\f1\fs20 dontSearch
\f0\fs28 		-	(true/false) Make this field invisible to the "find" menu item.\
	
\f1\fs20 sharedText
\f0\fs28 		-	(true/false) If this field is a background field, this will control whether the field's text will be the same on all cards, or whether its contents will be remembered independently for each card (useful for use as a form field).\
	
\f1\fs20 lockText
\f0\fs28 			-	(true/false) Whether the field's text is editable or not.	
\f1\fs20 autoSelect
\f0\fs28 		-	(true/false) whether this field is supposed to behave as a plain text field, or as a list where individual lines can be selected only.\
	
\f1\fs20 multipleLines
\f0\fs28 		-	(true/false) When autoSelect is true, this controls whether only one line can be selected, or several at once.\
	
\f1\fs20 wideMargins
\f0\fs28 		-	(true/false) Whether text is supposed to be drawn up to the edge to the field, or at an inset.\
\

\b 6.5. Button Properties
\b0 \
\
	
\f1\fs20 [short] name
\f0\fs28 		-	The name of the button, as displayed on the button when the showName property is true.\
	
\f1\fs20 rectangle
\f0\fs28 			-	The coordinates indicating the size and position of the button, as an associative array containing entries for the keys "
\f1\fs20 top
\f0\fs28 ", "
\f1\fs20 left
\f0\fs28 ", "
\f1\fs20 bottom
\f0\fs28 " and "
\f1\fs20 right
\f0\fs28 " as numbers, relative to a coordinate system that has the origin in its upper left.\
	
\f1\fs20 visible
\f0\fs28 			-	(true/false) Whether the button can be clicked and will be displayed on screen or not.\
	
\f1\fs20 enabled
\f0\fs28 			-	(true/false) Whether the button is supposed to be clickable or not. Parts of the button will be drawn in a "dimmed", inactive appearance.\
	
\f1\fs20 script
\f0\fs28 			-	The script of this button (i.e. the text you entered in its script editor to provide behaviours)\
	
\f1\fs20 style
\f0\fs28 			-	The button's style, controlling its border and behaviour.\
	
\f1\fs20 type
\f0\fs28 				-	Always "button".\
	
\f1\fs20 [short] id
\f0\fs28 		-	the unique identification number of the button.\
	
\f1\fs20 autoHighlight
\f0\fs28 		-	(true/false) Whether the button is supposed to provide visual feedback when clicked by automatically adjusting its highlightedForTracking property.\
	
\f1\fs20 highlight
\f0\fs28 			-	(true/false) Whether the button should be drawn highlighted or not. For checkboxes and radio buttons this controls whether their check mark is visible, for other button types this usually causes a "pressed" appearance.\
	
\f1\fs20 highlightedForTracking
\f0\fs28  - (true/false) Whether the button is supposed to draw in its "pressed" appearance or not.\
	
\f1\fs20 sharedHighlight
\f0\fs28 	-	(true/false) For background buttons, this controls whether the button's highlight will be the same on all cards, or whether it will be remembered separately for each card.\
	
\f1\fs20 showName
\f0\fs28 			-	(true/false) Whether the button will display its name as its title.\
\

\b 6.6. Movie Player Properties
\b0 \
\
	
\f1\fs20 [short] name
\f0\fs28 		-	The name of the movie player.\
	
\f1\fs20 rectangle
\f0\fs28 			-	The coordinates indicating the size and position of the movie player, as an associative array containing entries for the keys "
\f1\fs20 top
\f0\fs28 ", "
\f1\fs20 left
\f0\fs28 ", "
\f1\fs20 bottom
\f0\fs28 " and "
\f1\fs20 right
\f0\fs28 " as numbers, relative to a coordinate system that has the origin in its upper left.\
	
\f1\fs20 visible
\f0\fs28 			-	(true/false) Whether the movie player can be clicked and will be displayed on screen or not.\
	
\f1\fs20 enabled
\f0\fs28 			-	(true/false) Whether the movie player is supposed to be clickable or not. Parts of the movie player will be drawn in a "dimmed", inactive appearance.\
	
\f1\fs20 script
\f0\fs28 			-	The script of this movie player (i.e. the text you entered in its script editor to provide behaviours)\
	
\f1\fs20 type
\f0\fs28 				-	Always "moviePlayer".\
	
\f1\fs20 [short] id
\f0\fs28 		-	the unique identification number of the movie player.\
\

\b 6.7. Stacksmith Properties
\b0 \
\
	
\f1\fs20 itemDel[im[iter]]
\f0\fs28 	-	The character to use as the separator for items. This is "
\f1\fs20 ,
\f0\fs28 " by default, and is reset to "
\f1\fs20 ,
\f0\fs28 " at idle time.\
	
\f1\fs20 version
\f0\fs28 			-	The version number of Stacksmith.\
\

\b 7. System Messages
\b0 \
\
	
\f1\fs20 mouseDown
\f0\fs28 			-	The mouse has been pressed on an object.\
	
\f1\fs20 mouseStillDown
\f0\fs28 	-	Sent periodically after a mouseDown if the mouse is being held for a longer duration.\
	
\f1\fs20 mouseUp
\f0\fs28 			-	The mouse has been released again after being pressed on an object, and it was released inside the object.\
	
\f1\fs20 mouseUpOutside
\f0\fs28 	-	The mouse has been released again after being pressed on an object, and it was released outside the object\
	
\f1\fs20 openStack
\f0\fs28 			-	Sent to the first card of a stack when it is opened.\
	
\f1\fs20 closeStack
\f0\fs28 		-	Sent to the current card when a stack's window is closed.\
	
\f1\fs20 openCard
\f0\fs28 			-	Sent to a card right after it has been made the current card.\
	
\f1\fs20 closeCard
\f0\fs28 			-	Sent to a card right before it is being unloaded because the current card is being changed.\
	\
}</text>
		<highlight><false /></highlight>
	</content>
	<owner>3000</owner>
	<marked><false /></marked>
</card>
