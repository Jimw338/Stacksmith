The following syntax is currently supported by Stacksmith's programming language "Forge":

1) TOP-LEVEL CONSTRUCTS:

	on handlerName [<paramName1>[,<paramName2>[, ...]]
		commands
	end handlerName

This defines a command handler with the specified number of parameters that are automatically assigned to the local variables of that name.

	function handlerName [<paramName1>[,<paramName2>[, ...]]
		commands
	end handlerName

2) COMMANDS:

	handlerName [<param1>[,<param2>[,...]]]

This is the command that calls a command handler. The parameter values passed in may be any valid expression.

	put <expression> into <container>
	set <container> to <expression>

This stores the value of the specified expression in the variable or property with the specified name. If there is no variable of that name yet, it is created.
There are also put X after Y for appending Y to X, and put X before Y for prefixing Y with X.

	put <expression>

Writes the specified expression as a string to the message box.

	return <expression>

This sets the return value of the current handler to the value of the specified expression and exits the current handler.

	repeat while <conditionExpression>
		commands
	end repeat

This executes the commands repeatedly while the value of <conditionExpression> is "true". If conditionExpression starts out false, this executes no commands apart from evaluating the expression.

	repeat until <conditionExpression>
		commands
	end repeat

This basically loops while the conditionExpression is false.

	repeat [for] <count> [times]
		commands
	end repeat

This repeats the specified commands <count> times.

	repeat with <variableName> from <startNum> [down] to <endNum>
		commands
	end repeat

puts each number from startNum to endNum into the variable and executes the commands for each one of them.

	repeat for each <chunkType> <variableName> in <expression>
		commands
	end repeat

Put each byte, character, word, line or item in the given expression into the specified variable and execute the given commands for it.

	global <variableName>

Create a global variable with the given name (if it doesn't already exist) and make it possible to manipulate it in the current handler.

	go [to] <objectDescriptor>

Opens the specified stack, or navigates to the specified card in the current stack.

	visual effect <effectName>

Specifies a transition effect to be used by the next "go" command.

	answer <message> [with <buttonName> [or <buttonName>] [or <buttonName>]]

displays a dialog containing a message and up to three replies as buttons. The variable "the result" will contain the name of the button the user clicked (and "it" will, as well - for historical reasons).

	ask <question> [with <defaultAnswer>]

Display a dialog containing the given message and an edit field for entering an answer, plus OK and Cancel buttons. The variable "the result" will contain the button the user clicked (either "OK" or "Cancel") and the variable "it" will contain the answer that was in the text field when the user clicked the button.

3) EXPRESSIONS:

An expression consists of either a single term, or two or more terms ("operands") chained together using operators.

Supported operators at this time are:

	+  - Add the two operands.
	-  - Subtract the second operand from the first one.
	*  - Multiply the two operands.
	/  - Divide the first operand by the second one.
	=  - compare the two operands. This tries to do int/int, float/float or bool/bool comparisons before it falls back on case-insensitive string comparison.
	<> - compare the two operands, returning FALSE if they are equal and TRUE if they are not equal.
	is - alternate spelling for =.
	is not - alternate spelling for <>
	<  - compare the two operands and return TRUE if the first one is less than the second one, FALSE otherwise. For numbers, this compares their numeric value, for strings their sort order. I.e. Aa < Ab.
	>  - compare the two operands and return TRUE if the first one is more than the second one, FALSE otherwise. For numbers, this compares their numeric value, for strings their sort order. I.e. Ab > Aa.
	<= - compare the two operands and return TRUE if the first one is less than or equal to the second one, FALSE otherwise. For numbers, this compares their numeric value, for strings their sort order. I.e. Aa <= Ab, Aa <= Aa.
	>= - compare the two operands and return TRUE if the first one is more than or equal to the second one, FALSE otherwise. For numbers, this compares their numeric value, for strings their sort order. I.e. Ab >= Aa, Aa >= Aa.
	mod[ulo] - Return the remainder that occurs when dividing the first operand by the second.
	^  - Raise the first exponent to the power of the second. i.e. 2 ^ 3 = 8
	
	& - Convert the operands to strings and append the second one to the first one.
	&& - Like &, but inserts a space between the two strings.

4) TERMS:

A term can be either a quoted string literal, an unquoted string literal, a variable name, an integer, or a function call.

	"This is a String"

This is a string. It may contain spaces and other odd characters, but it may not contain any quote characters.

	foobar

This is an unquoted string literal. An unquoted string literal must adhere to the same rules as any valid identifier (i.e. handler name or so). In particular, it may not contain spaces or other punctuation. Note that if an unquoted string literal's name collides with a variable name, it will be reinterpreted as a variable name as soon as something has been put into the variable of that name (i.e. as soon as the variable has been created). In fact, all unquoted string literals are simply variables that are initialised with their name as their value.

	myVariable

A variable name must also be a valid identifier. If you use a variable name before something has been put into it, it is treated as an unquoted string literal.

	the result
	
The Result is a special variable that holds the return value from the last handler that's been called in the current function.

	123

This is an integer. An integer may only consist of the digits 1 through 9 and 0.

	123.456

This is a fractional number. A fractional number may consist of the digits 1 through 9, 0, and of a single decimal point.

	myFunction( [<param1>[, <param2>[, ...]]] )

A function call works the same as a handler call. It may take parameters. The return value of the function will be used as the value of this term when it is used in an expression.

	byte[s] <startOffsetExpr> [to <endOffsetExpr>] of <term>
	char[acter][s] <startOffsetExpr> [to <endOffsetExpr>] of <term>
	line[s] <startOffsetExpr> [to <endOffsetExpr>] of <term>
	item[s] <startOffsetExpr> [to <endOffsetExpr>] of <term>
	word[s] <startOffsetExpr> [to <endOffsetExpr>] of <term>

Extracts a chunk (aka substring) from the specified term. Items are comma-delimited, lines are return-delimited. Words are delimited by one or more characters of whitespace.
You can also change the value of a chunk.

	number of bytes of <expression>
	number of char[acter]s of <expression>
	number of lines of <expression>
	number of items of <expression>
	number of words of <expression>

Counts the number of entities of the specified chunk type that can be extracted from the specified expression. 

	constant
	
There are several constants whose name consists of one or more identifiers:

	true
	false
	return		-- the return character, numToChar(13), also available under the
					shorter "cr" name.
	lineFeed	-- the Unix newline character, numToChar(10), also available
					under the name "newline".
	empty		-- an empty string. Equivalent to "".
	quote		-- the quote character (")
	comma		-- the comma character (,)
	colon		-- the colon character (:)
	space		-- the space character (" "), numToChar(32)
	tab			-- the tabulator character, numToChar(9)
	pi			-- the number "pi". Roughly 3.14
	
	iris open			-- transition effect you can pass to the 'visual effect' command.
	iris close			-- transition effect you can pass to the 'visual effect' command.
	barn door open		-- transition effect you can pass to the 'visual effect' command.
	barn door close		-- transition effect you can pass to the 'visual effect' command.
	checkerboard
	dissolve			-- transition effect you can pass to the 'visual effect' command.
	venetian blinds
	stretch from top
	stretch from center
	stretch from bottom
	shrink to top
	shrink to center
	shrink to bottom
	wipe left			-- transition effect you can pass to the 'visual effect' command.
	wipe right			-- transition effect you can pass to the 'visual effect' command.
	wipe up				-- transition effect you can pass to the 'visual effect' command.
	wipe down			-- transition effect you can pass to the 'visual effect' command.
	push left			-- transition effect you can pass to the 'visual effect' command.
	push right			-- transition effect you can pass to the 'visual effect' command.
	push up				-- transition effect you can pass to the 'visual effect' command.
	push down			-- transition effect you can pass to the 'visual effect' command.
	zoom open
	zoom close
	zoom in
	zoom out
	scroll left			-- transition effect you can pass to the 'visual effect' command.
	scroll right		-- transition effect you can pass to the 'visual effect' command.
	scroll up			-- transition effect you can pass to the 'visual effect' command.
	scroll down			-- transition effect you can pass to the 'visual effect' command.

A term may also consist of an object descriptor:

	stack <stackNameOrPath>
	
A stack, referenced by name or slash-delimited POSIX-style search path. If you only specify the file name, and a stack of that name is not already open, Stacksmith currently makes a best-effort attempt at finding the file, searching for stacks next to the Stacksmith application or in its own "Resources" folder.

	background <backgroundNameOrNumber>

A background, referenced by name, or number. The number being its position in the list of backgrounds. The first background has the number 1 (not zero).

	card <cardNameOrNumber>

A card, referenced by name, or number. The number being its position in the list of all cards. The first background has the number 1 (not zero).

	card button <buttonNameOrNumber>
	background button <buttonNameOrNumber>

A button on the current card or on its background, referenced by name, or number. The number being its position in the list of all buttons on the card/background. The first and backmost button has the number 1 (not zero).

	card field <fieldNameOrNumber>
	background field <fieldNameOrNumber>

A text field on the current card or on its background, referenced by name, or number. The number being its position in the list of all fields on the card/background. The first and backmost field has the number 1 (not zero).

	card part <partNameOrNumber>
	background part <partNameOrNumber>

A button or text field on the current card or on its background, referenced by name, or number. The number being its position in the combined list of all buttons and fields on the card/background. The first and backmost part has the number 1 (not zero).

	this stack

The stack whose window is currently frontmost. This is the "current" stack.

	this card

The card currently being shown in the frontmost stack's window.

	this background
	
The background that the card specified by "this card" belongs to.

	first card
	last card

The respective cards in the current stack (i.e. "this stack").

	next card
	previous card

The card following/preceding "this card". The previous card of the first card is the last card, and the next card of the last card is the first card, making the list of cards a closed ring as far as "next card" and "current card" are concerned.

	me

Ths object that the script belongs to in which this object descriptor occurs.

A term may also be a property expression:

	[the] [long|short|abbr[ev[iated]]] <propertyName> [of <objectDescriptor>]

Depending on the object descriptor, there may be different properties. If there is no object descriptor, it is assumed to be a property of Stacksmith itself, which is global to the entire application. If you provide a variable instead of an object descriptor, the variable will be treated as an associative array, and the property name will be used as the key into the array.

5) CONTAINERS

A container is an object descriptor for a part (button or field), or a variable, or a property expression. Containers can be changed using the "put" or "set" commands.

6) PROPERTIES

6.1) STACK PROPERTIES

	[short] name		-	The name of the stack, without the ".xstk" file type suffix.

6.2) BACKGROUND PROPERTIES

	[short] name		-	The name of the background, as displayed in "Background Info".

6.3) CARD PROPERTIES

	[short] name		-	The name of the card, as displayed in "Card Info".

6.4) FIELD PROPERTIES

	[short] name		-	The name of the field, as displayed in "Field Info".
	rectangle			-	The coordinates indicating the size and position of the field, as an associative array containing entries for the keys "top", "left", "bottom" and "right" as numbers, relative to a coordinate system that has the origin in its upper left.

6.5) BUTTON PROPERTIES

	[short] name		-	The name of the button, as displayed on the button when the showName property is true.
	rectangle			-	The coordinates indicating the size and position of the button, as an associative array containing entries for the keys "top", "left", "bottom" and "right" as numbers, relative to a coordinate system that has the origin in its upper left.

6.6) STACKSMITH PROPERTIES

	itemDel[im[iter]]	-	The character to use as the separator for items. This is "," by default, and is reset to "," at idle time.

7) SYSTEM MESSAGES:

	mouseDown			-	The mouse has been pressed on an object.
	mouseStillDown		-	Sent periodically after a mouseDown if the mouse is being held for a longer duration.
	mouseUp				-	The mouse has been released again after being pressed on an object, and it was released inside the object.
	mouseRelease		-	The mouse has been released again after being pressed on an object, and it was released outside the object (name subject to change)
	
