<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE stack PUBLIC "-//Apple, Inc.//DTD stack V 2.0//EN" "" >
<stack>
	<id>-1</id>
	<cardCount>9</cardCount>
	<cardID>3916</cardID>
	<listID>6321</listID>
	<cantModify> <false /> </cantModify>
	<cantDelete> <false /> </cantDelete>
	<cantAbort> <false /> </cantAbort>
	<cardSize>
		<width>512</width>
		<height>342</height>
	</cardSize>
	<script>∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞Home StackVersion 2.4.1©Copyright 1987-1998 by Apple Computer,Inc.All Rights Reserved.THE MESSAGE HANDLERS USED IN THIS SCRIPT:startUp,getHomeInfo,resume,createTheMenus,menuReset,goHomeCards,checkForHomeMenu,menuStatus,updateHomeMenu,help,hyperTalk,nav,c,b,s,mw,vw,se,ss,xy,disallowInterruption,allowInterruption,setUserLevelFive,restoreUserLevel,searchScript,newLink,checkForMissingFontsTHE FUNCTION HANDLERS USED IN THIS SCRIPT:homeMenuItems,homeMenuMsgs,lastHCItem,checkHCFontXCMD'S USED BY THIS SCRIPT:FontExists XFCNForm: FontExists(&lt;font name&gt;,&lt;point size&gt;)It returns true if the font/point size is installed or false if not."--∆" indicates strings which will need localization∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞∞-----  Startup/Resume Scripts:  --------------------------------------on startUp-- Requires handler: getHomeInfo,checkForMissingFonts-- gets and sets the user's preferencesgetHomeInfo-- audio Palette startupif there is a stack "Audio Help" then -- ∆start using stack "Audio Help" -- ∆send "startSound" to stack "Audio Help" -- ∆end ifif there is a stack "Power Tools" then -- ∆start using stack "Power Tools" -- ∆end ifcheckForMissingFonts -- inform user of missing fontspass startUp -- so others can use itend startUpon getHomeInfo-- Needs: User preferences card of the home stack-- configures HyperCard to the user specified preferences-- The following 3 globals are used by HyperCard for locating-- stacks,applications, and documentsglobal Stacks,Applications,Documents,UserNameif short name of this stack is not "Home" then -- ∆lock screenset lockRecent to trueset lockMessages to truepush this card -- remember where we arego home -- will take us to the home stack in case we're not thereput false into stackIsHomeelse put true into stackIsHomeput (cd fld "User Name" of cd "User Preferences") into UserNameset the userLevel to cd fld "User Level" of cd "User Preferences" -- hidden fieldset the powerKeys to hilite of cd btn id 3 of cd "User Preferences" -- Power Keysset the textArrows to hilite of cd btn id 2 of cd "User Preferences" -- Arrow keys in textset the blindTyping to hilite of cd btn id 1 of cd "User Preferences" -- Blind Typing-- load the search path globalsput bg fld "Paths" of cd "Stacks" of bg "Paths" into Stacksput bg fld "Paths" of cd "Applications" of bg "Paths" into Applicationsput bg fld "Paths" of cd "Documents" of bg "Paths" into Documentsif not stackIsHome thenpop card -- return to where we wereset lockRecent to false -- clean up for exitset lockMessages to falseunlock screenend ifend getHomeInfoon resume-- Requires handler: startUp-- runs startUp handler upon returningstartUppass resume -- so others can use itend resume-----  Menu Scripts:  ---------------------------------------------on createTheMenus resuming-- Requires function handlers: homeMenuItems,homeMenuMsgs-- creates the "Home" menuif resuming is "true" and "Home" is in the menus -- ∆then delete menu "Home" -- ∆ not our home menuif "Home" is in the menus then exit createTheMenus -- ∆show menuBar -- needed by the "Home" menucreate menu "Home" -- ∆put homeMenuItems() into menu "Home" with menuMsgs homeMenuMsgs() -- ∆end createTheMenusfunction homeMenuItems -- ∆return "New Link to Stack...,New Link to Application...," &amp; ¬"New Link to Document...,-,Rename This Card...,Reorder Cards...," &amp; ¬"-,Home Cards,Preferences,Search Paths"end homeMenuItemsfunction homeMenuMsgsreturn "NewLink stack,NewLink application,NewLink document,empty," &amp; ¬"RenameCard,ReorderCards,empty,go first card of bg" &amp;&amp; quote &amp; ¬"Home Cards" &amp; quote &amp;&amp; ",go card" &amp;&amp; quote &amp; "User Preferences" &amp; ¬quote &amp; ",go card" &amp;&amp; quote &amp; "Stacks" &amp; quoteend homeMenuMsgson goHomeCardsglobal WhichHomeCardif WhichHomeCard is emptythen put (short name of first card) into WhichHomeCardgo card WhichHomeCard-- couldn't find requested cardif the result is not empty then go first cd of bg "Home Cards"end goHomeCardson checkForHomeMenuif (there is a menu "Home") and ¬(the short name of this stack is "Home")then delete menu "Home" -- ∆end checkForHomeMenuon menuStatus status,update-- Requires handler: createTheMenus,updateHomeMenu-- make the "Home" menu if necessarycreateTheMenusif there is no menu "Home" then exit menuStatus -- ∆-- update home menuget short name of this bgif it is "paths" then put "Search Paths" into itset checkMark of menuItem it of menu "Home" to status -- ∆-- disable items not functional in this bgset enabled of menuItem "Rename This Card..." of menu "Home" to update -- ∆set enabled of menuItem "Reorder Cards..." of menu "Home" to update -- ∆end menuStatuson menuReset isHome-- Rebuild the Home menu if we are active stackput long name of me into WhoIAmif (long name of this stack) = WhoIAm thenif (long name of the target) contains WhoIAm thensend "activateHomeMenu" to this cdend ifend if-- Pass if not last or in useif isHome ≠ "Home" and WhoIAm ≠ long name of stack Home then pass menuResetend menuReseton activateHomeMenumenuStatus true,falseend activateHomeMenu-----  Help Scripts:  ------------------------------------------------on help theTopic-- ∆ Note: typing "help &lt;topic&gt;" into msg box will locate-- the &lt;topic&gt; in "HyperCard Help"put "HyperCard Help" into theStack -- ∆if ":" &amp; theStack &amp; return is in the stacks thenif the longWindowTitlesthen show window line (the number of lines of char 1 to offset(":" &amp; theStack &amp; return, the stacks) of the stacks) of the stackselse show window theStackelsego to stack theStack in a new window -- try in a new windowif the result = "Cancel" then exit to hyperCardelse if the result ≠ empty then go to stack theStackend ifif short name of this stack is theStack then findInTitle theTopic -- in the help stackend helpon hyperTalk theTopic-- ∆ Note: typing "hyperTalk &lt;topic&gt;" into msg box will locate-- the &lt;topic&gt; in "HyperTalk Reference"put "HyperTalk Reference" into theStack -- ∆if ":" &amp; theStack &amp; return is in the stacks thenif the longWindowTitlesthen show window line (the number of lines of char 1 to offset(":" &amp; theStack &amp; return, the stacks) of the stacks) of the stackselse show window theStackelsego to stack theStack in a new window -- try in a new windowif the result = "Cancel" then exit to hyperCardelse if the result ≠ empty then go to stack theStackend ifif short name of this stack is theStack then findInTitle theTopic -- in the help stackend hyperTalk-----  Utility Scripts:  ---------------------------------------------on nav  -- ∆ type "nav" into message box-- Requires XCMD: palette "Navigator"palette "Navigator"end navon c  -- ∆ type "c" into message box-- Requires handlers: setUserLevelFive,restoreUserLevelput the tool into saveToolchoose browse toolsetUserLevelFive -- so the menu item will be theredoMenu "Card Info..."restoreUserLevelchoose saveToolend con b  -- ∆ type "b" into message box-- Requires handlers: setUserLevelFive,restoreUserLevelput the tool into saveToolchoose browse toolsetUserLevelFive -- so the menu item will be theredoMenu "Bkgnd Info..."restoreUserLevelchoose saveToolend bon s  -- ∆ type "s" into message box-- Requires handlers: setUserLevelFive,restoreUserLevelput the tool into saveToolchoose browse toolsetUserLevelFive -- so the menu item will be theredoMenu "Stack Info..."restoreUserLevelchoose saveToolend son mw  -- ∆ type "mw" into message box-- Requires XWindow: Message Watchershow message watcherend mwon vw  -- ∆ type "vw" into message box-- Requires XWindow: Variable Watchershow variable watcherend vwon se  -- ∆ type "se" into message box-- Requires XWindow: Script Editorask "Set script editor font type to:" with "Monaco" -- ∆ default valueif the result is "Cancel" or it is empty then exit seset scriptTextFont to itask "Set script editor font size to:" with "9" -- ∆ default valueif the result is "Cancel" or it is empty then exit seset scriptTextSize to itend seon ss pattern,stackName  -- ∆ type "ss" into message box-- Requires handler: searchScriptsearchScript pattern,stackNameend sson xy -- ∆ type "xy" into message box to obtain mouse coordinatesset cursor to crossrepeat until the mouseClickput the mouseLoc &amp;&amp; "  horz:" &amp; the mouseH &amp;&amp; "  vert:" &amp; the mouseV -- ∆end repeatend xyon disallowInterruption -- so can't stop scripts while runningset cantAbort of this stack to trueend disallowInterruptionon allowInterruption -- so can stop scripts while runningset cantAbort of this stack to falseend allowInterruptionon setUserLevelFive -- some things need this userLevelglobal SvLvlput the userLevel into SvLvlset the userLevel to 5end setUserLevelFiveon restoreUserLevel -- use after setUserLevelFiveglobal SvLvlif SvLvl is a number then set the userLevel to SvLvlend restoreUserLevelon searchScript pattern,stackName-- Requires handlers: setUserLevelFive,restoreUserLevel-- search ALL scripts of a stack for a 'pattern' of charactersglobal ScriptFindString -- HyperTalk global variableset lockRecent to truesetUserLevelFive -- saves current level and sets level 5push card -- remember where we areif pattern is empty thenask "Search for what string?" with ScriptFindString -- ∆if (it is empty) or (the result is "Cancel") then exit searchScriptput it into pattern -- otherwise use it as the search patternend if-- put in HyperTalk global so just CMD-F in editor for easy findput pattern into ScriptFindStringset lockMessages to true -- avoid open messagesif stackName is not empty then go to stack stackName-- Note: if stackName is empty then we search the current stackset cursor to busy-- search the stack script of the stackif the script of this stack contains patternthen edit script of this stack-- search the background scripts and objects of the stackrepeat with curBkgnd = 1 to the number of bkgndsset cursor to busygo to card 1 of bkgnd curBkgndif the script of this bkgnd contains patternthen edit script of bkgnd curBkgndrepeat with curBgBtn = 1 to the number of bkgnd buttonsset cursor to busyif the script of bkgnd button curBgBtn contains patternthen edit script of bkgnd button curBgBtnend repeatrepeat with curBgField = 1 to the number of bkgnd fieldsset cursor to busyif the script of bkgnd field curBgField contains patternthen edit script of bkgnd field curBgFieldend repeatend repeat-- search the card scripts and objects of the stackrepeat with curCard = 1 to the number of cardsset cursor to busygo card curCardif the script of this card contains patternthen edit script of this cardrepeat with curCdBtn = 1 to the number of card buttonsset cursor to busyif the script of card button curCdBtn contains patternthen edit script of card button curCdBtnend repeatrepeat with curCdFld = 1 to the number of card fieldsset cursor to busyif the script of card field curCdFld contains patternthen edit script of card field curCdFldend repeatend repeatpop card -- return to where we wereset lockMessages to falseset lockRecent to falserestoreUserLevel -- set userLevel back to whatever it wasanswer "Search script done!" -- ∆end searchScriptfunction lastHCItem delim,theText-- returns the portion of &lt;theText&gt; that follows the last &lt;delim&gt;if delim is in theText thenput lastHCItem(delim,char offset(delim,theText) + 1 to ¬length(theText) of theText) into theTextend ifreturn theTextend lastHCItem-----  NewLink Handler  ---------------------------------------------on newLink theTypeif short name of this stack = "Home" -- ∆then send "newLink" &amp;&amp; theType to bkgnd id 2717end newLink-----  Font Adjustment Scripts:  ----------------------------------on checkForMissingFonts-- Requires handler: checkHCFont-- check to see if the fonts needed for the stacks are-- installed in the system. Inform the user if they're not.get checkHCFont("Courier","9,12") &amp; checkHCFont("Geneva","10,14") &amp; ¬checkHCFont("Palatino","10,12,14,18,24") &amp; ¬checkHCFont("Helvetica","18,24") -- these are fonts needed by this stackif it is empty then exit checkForMissingFontselse put it into missingFontsbeep 1-- ∆ this dialog informs the user which fonts are missinganswer "These font(s) are missing from your system:" &amp; ¬return &amp; return &amp; missingFonts &amp; return &amp; ¬"For text to display correctly in the stacks, make sure you have" ¬&amp;&amp; "installed the fonts included with HyperCard."end checkForMissingFontsfunction checkHCFont theFont,pointSizes-- Requires XFCN: FontExists-- returns a list of font sizes needed but not in the systemput empty into missing-- steps through each point size passed inrepeat with count = 1 to the number of items in pointSizesput item count of pointSizes into theCurrentPtSizeif not FontExists(theFont,theCurrentPtSize) -- if can't find itthen put theCurrentPtSize &amp; "," after missingend repeatif missing is not empty thenput theFont &amp; space before missingdelete last char of missingput return after missingend ifreturn missingend checkHCFonton etxtopen file "ExportedText.txt"write "STACK: " &amp;&amp; short name of this stack to file "ExportedText.txt"repeat with x = 1 to (number of cds)set cursor to busyrepeat with y = 1 to (number of bg flds)put "bg fld " &amp;&amp; y &amp;&amp; " of cd " &amp;&amp; xwrite "===== BG FLD " &amp;&amp; y &amp;&amp; " OF CD " &amp;&amp; x &amp;&amp; " =====" &amp;return to file "ExportedText.txt"write bg fld y of cd x &amp;return&amp;return to file "ExportedText.txt"end repeatrepeat with y = 1 to (number of cd flds)put "cd fld " &amp;&amp; y &amp;&amp; " of cd " &amp;&amp; xwrite "===== CD FLD " &amp;&amp; y &amp;&amp; " OF CD " &amp;&amp; x &amp;&amp; " =====" &amp;return to file "ExportedText.txt"write cd fld y of cd x &amp;return&amp;return to file "ExportedText.txt"end repeatend repeatclose file "ExportedText.txt"end etxt</script>
	<background id="2717" file="background_2717.xml" />
	<background id="4099" file="background_4099.xml" />
	<background id="16078" file="background_16078.xml" />
	<card id="3916" file="card_3916.xml" />
	<card id="16724" file="card_16724.xml" />
	<card id="6749" file="card_6749.xml" />
	<card id="5101" file="card_5101.xml" />
	<card id="6978" file="card_6978.xml" />
	<card id="2376" file="card_2376.xml" />
	<card id="3517" file="card_3517.xml" />
	<card id="3090" file="card_3090.xml" />
	<card id="5698" file="card_5698.xml" />
</stack>
